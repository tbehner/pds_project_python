import threading        # for Threads
import sys              # maybe I don't need this, let's see
import re               # regular expressions
from optparse import OptionParser
import time
from xmlrpc.server  import SimpleXMLRPCServer
from xmlrpc.server  import SimpleXMLRPCRequestHandler

class ServerFunctions:
    def __init__(self
    """
        local functions
        
        these are functions which are used by the programm working as a client
    """

    # TODO hier nur noch die Server-Adressen übermitteln, die ungleich dem Server sind,
    # an den übermittelt wird
    # populate the server list to all known servers
    def __populate_servers():
        # FIXME hier ist irgendwo ein Bug
        for server in servers:
            if server == own_connection:
                continue
            con = xmlrpc.client.ServerProxy(get_con_string(server))
            con.check_server_list(servers)

    def __start_serving(server):
        try:
            print("Server started...")
            server.serve_forever()
            # send information about all known servers to the new one
            # send the information of the new server to all other known servers
        except:
            print("Not foreseen shutdown")
        print("... and offline!")

    def __get_con_string(server):
        return "http://{}/".format(server)

    # TODO diese hier in eine eigene Klasse verfrachten und dann nicht mehr einzeln beim Server registrieren
    """
        server functions

        these are functions which are serverd by the xmlrpc server
    """

    def remove_server(self,server):
        print("Saying bye to server {}".format(server))
        servers.remove(server)
        populate_servers()
        return 0

    # TODO hier nicht mehr die Client adresse explizit angeben müssen sondern aus dem Request erfragen
    # it is assumed that server is given in the format 'address:port'
    def register_new_server(self,server_addr):
        if not server_addr in servers:
            print("New server {}".format(server_addr))
            print("Incomming connection: {}".format(ChattyRequestHandler.log[-1]))
            print("History of connections: {}".format(ChattyRequestHandler.log))
            servers.append(server_addr)
            #populate_servers()
            return 1
        return 0

    def check_server_list(self,server_list):
        servers = server_list
        #print(servers)
        return 1


